syntax = "proto3";
package eth;

import "google/protobuf/empty.proto";

/*
    This package is made for implementing the EVM RPCs here is the reference that we used to build them:
    https://ethereum.github.io/execution-apis/api-documentation/
*/
service Api {
  /// Returns eth_accounts list.
  rpc EthAccounts(google.protobuf.Empty) returns (EthAccountsResponse);

  /// Call contract, returning the output data. Does not create a transaction.
  rpc EthCall(EthCallRequest) returns (EthCallResponse);

  /// Returns the balance for the given address.
  rpc EthGetBalance(EthGetBalanceRequest) returns (EthGetBalanceResponse);

  /// Returns information about a block by hash.
  rpc EthGetBlockByHash(EthGetBlockByHashRequest) returns (EthBlockInfo);

  /// Returns the balance for the given address.
  rpc EthSendTransaction(EthSendTransactionRequest) returns (EthSendTransactionResponse);

  /// Returns the chain ID used for signing replay-protected transactions.
  rpc EthChainId(google.protobuf.Empty) returns (EthChainIdResponse);

  /// Returns the current network id.
  rpc NetVersion(google.protobuf.Empty) returns (EthChainIdResponse);

  /// Returns the number of most recent block.
  rpc EthBlockNumber(google.protobuf.Empty) returns (EthBlockNumberResponse);

  /// Returns information about a block by block number.
  rpc EthGetBlockByNumber(EthGetBlockByNumberRequest) returns (EthBlockInfo);

  /// Returns the information about a transaction from a transaction hash.
  rpc EthGetTransactionByHash(EthGetTransactionByHashRequest) returns (EthTransactionInfo);

  /// Returns information about a transaction given a blockhash and transaction index position.
  rpc EthGetTransactionByBlockHashAndIndex(EthGetTransactionByBlockHashAndIndexRequest) returns (EthTransactionInfo);

  /// Returns information about a transaction given a block number and transaction index position.
  rpc EthGetTransactionByBlockNumberAndIndex(EthGetTransactionByBlockNumberAndIndexRequest) returns (EthTransactionInfo);

  /// Returns true if client is actively mining new blocks.
  rpc EthMining(google.protobuf.Empty) returns (EthMiningResponse);

  /// Returns the number of transactions in a block from a block matching the given block hash.
  rpc EthGetBlockTransactionCountByHash(EthGetBlockTransactionCountByHashRequest) returns (EthGetBlockTransactionCountByHashResponse);

  /// Returns the number of transactions in a block matching the given block number.
  rpc EthGetBlockTransactionCountByNumber(EthGetBlockTransactionCountByNumberRequest) returns (EthGetBlockTransactionCountByNumberResponse);

  /// Returns code at a given address.
  rpc EthGetCode(EthGetCodeRequest) returns (EthGetCodeResponse);

  /// Returns the value from a storage position at a given address.
  rpc EthGetStorageAt(EthGetStorageAtRequest) returns (EthGetStorageAtResponse);

  /// Creates new message call transaction or a contract creation for signed transactions.
  rpc EthSendRawTransaction(EthSendRawTransactionRequest) returns (EthSendRawTransactionResponse);
}

/*
  This is the return of the RPC call: EthAccounts.
  In case that there is no ethereum addresses, it will return an empty array.
  Here is an example of the return of this proto message:
  result: ["0x407d73d8a49eeb85d32cf465507dd71d507100c1",]
  result: []
*/
message EthAccountsResponse {
    repeated string accounts = 1; // [Hex string] The list of accounts
}

message EthTransactionInfo {
    optional string from = 1; // [Hex string] The address from which the transaction is sent
    optional string to = 2; // [Hex string] The address to which the transaction is addressed
    optional uint64 gas = 3; // The integer of gas provided for the transaction execution
    optional string price = 4; // [Hex string] The integer of gas price used for each paid gas
    optional string value = 5; // [Hex string] The integer of value sent with this transaction
    optional string data = 6; // [Hex string] The hash of the method signature and encoded parameters.
    optional string nonce = 7; // [Hex string] The integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce.
}

/*
    This is the return of the RPC call: EthChainId
    This RPC cannot return null or empty string
    Here is an example of the return of this proto message:
    result: "0x1"
    result: "0x2"
*/
message EthChainIdResponse {
    string id = 1; // [Hex string] Integer of the current chain id.
}

message EthBlockInfo {
    string block_number = 1; // [Hex string] The block number. null when its pending block.
    string hash = 2; // [Hex string] Hash of the block. null when its pending block.
    string parent_hash = 3; // [Hex string] Hash of the parent block.
    string nonce = 4; // [Hex string] Hash of the generated proof-of-work. null when its pending block.
    string sha3_uncles = 5; // [Hex string] SHA3 of the uncles data in the block.
    string logs_bloom = 6; // [Hex string] The bloom filter for the logs of the block. null when its pending block.
    string transactions_root = 7; // [Hex string] The root of the transaction trie of the block.
    string state_root = 8; // [Hex string] The root of the final state trie of the block.
    string receipt_root = 9; // [Hex string] The root of the receipts trie of the block.
    string miner = 10; // [Hex string] The address of the beneficiary to whom the mining rewards were given.
    string difficulty = 11; // [Hex string] Integer of the difficulty for this block.
    string total_difficulty = 12; // [Hex string] Integer of the total difficulty of the chain until this block.
    string extra_data = 13; // [Hex string] The "extra data" field of this block.
    string size = 14; // [Hex string] Integer the size of this block in bytes.
    string gas_limit = 15; // [Hex string] The maximum gas allowed in this block.
    string gas_used = 16; // [Hex string] The total used gas by all transactions in this block.
    string timestamps = 17; // [Hex string] The unix timestamp for when the block was collated.
    repeated string transactions = 18; // [Array Hex string] Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter.
    repeated string uncles = 19; // [Array Hex string] Array of uncle hashes.
}

message EthTransactionReceipt {
    string transaction_hash = 1; // [Hex string] Hash of the transaction.
    string transaction_index = 2; // [Hex string] Integer of the transactions index position in the block.
    string block_hash = 3; // [Hex string] Hash of the block where this transaction was in.
    string block_number = 4; // [Hex string] Block number where this transaction was in.
    string from = 5; // [Hex string] Address of the sender.
    string to = 6; // [Hex string] Address of the receiver. null when its a contract creation transaction.
    string cumulative_gas_used = 7; // [Hex string] The total amount of gas used when this transaction was executed in the block.
    string effective_gas_price = 8; // [Hex string] The sum of the base fee and tip paid per unit of gas.
    string gas_used = 9; // [Hex string] The amount of gas used by this specific transaction alone.
    string contract_address = 10; // [Hex string] The contract address created, if the transaction was a contract creation, otherwise null.
    repeated string logs = 11; // [Array Hex string] Array of log objects, which this transaction generated.
    string logs_bloom = 12; // [Hex string] Bloom filter for light clients to quickly retrieve related logs.
    string type = 13; // [Hex string] Integer of the transaction type, 0x00 for legacy transactions, 0x01 for access list types, 0x02 for dynamic fees. It also returns either :
    optional string root = 14; // [Hex string] 32 bytes of post-transaction stateroot (pre Byzantium)
    optional string status = 15; // [Hex string] Either 1 (success) or 0 (failure)
}

message EthCallRequest {
    EthTransactionInfo transaction_info = 1; // The transaction call object
    string block_number = 2; // Block number in hexadecimal format or the string latest, earliest, pending, safe or finalized
}

/*
    This is the return of the RPC call: EthCall.
    Here is an example of the return of this proto message:
    "result": "0x"
    "result": "0xb1770efb14906e509893b6190359658208ae64d0c56e22f748a1b0869885559e"
*/
message EthCallResponse {
    string data = 1; // [Hex string] The return value of the executed contract method
}

/*
    This is the request of the RPC call: EthSign.
    Here is an example of the parameters of this proto message:
    "params":["0x9b2055d370f73ec7d8a03e965129118dc8f5bf83", "0xdeadbeaf"]
*/
message EthSignRequest {
    string address = 1; // [Hex string] Address you want to use to sign the message
    string message = 2; // [Hex string] Value of the message that you want to sign
}

/*
    This is the return of the RPC call: EthSign.
    Here is an example of the return of this proto message:
    "result": "0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b"
*/
message EthSignResponse {
    string signature = 1; // [Hex string] Value of the signed message
}

/*
    This is the request of the RPC call: EthGetBalance.
    Here is an example of the parameters of this proto message:
    params: ["0x407d73d8a49eeb85d32cf465507dd71d507100c1", "latest"]
    params: ["0x407d73d8a49eeb85d32cf465507dd71d507100c1", "0x20"]
*/
message EthGetBalanceRequest {
    string address = 1; // [Hex string] Address you want to check the balance
    string block_number = 2; // [Hex string] Integer block number, or the string "latest", "earliest" or "pending"
}

/*
    This is the return of the RPC call: EthGetBalance.
    This request will fail of the address or the block number is incorrect.
    Here is an example of the return of this proto message:
    "result": "0x0234c8a3397aab58" // 158972490234375000
*/
message EthGetBalanceResponse {
    string balance = 1; // [Hex string] Integer of the current balance in wei
}

/*
    This is the request of the RPC call: EthSendTransaction.
    Here is an example of the parameters of this proto message:
    params: [{
        from: "0xb60e8dd61c5d32be8058bb8eb970870f07233155",
        to: "0xd46e8dd67c5d32be8058bb8eb970870f07244567",
        gas: "0x76c0", // 30400
        gasPrice: "0x9184e72a000", // 10000000000000
        value: "0x9184e72a", // 2441406250
        data: "0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675",
    },]
*/
message EthSendTransactionRequest {
    EthTransactionInfo transaction_info = 1; // The transaction object
}

/*
    This is the return of the RPC call: EthSendTransaction.
    This request will return "0x" if the transaction is not available yet.
    Here is an example of the return of this proto message:
    "result": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"
    "result": "0x"
*/
message EthSendTransactionResponse {
    string hash = 1; // [Hex string] The transaction hash, or the zero hash if the transaction is not yet available
}

/*
    This is the return of the RPC call: EthCoinbase.
    Here is an example of the return of this proto message:
    "result": "0x407d73d8a49eeb85d32cf465507dd71d507100c1"
*/
message EthCoinBaseResponse {
    string address = 1; // [Hex string] The current coinbase address
}

/*
    This is the return of the RPC call: EthMining.
    Here are the two possible return of this proto message:
    "result": true
    "result": false
*/
message EthMiningResponse  {
    bool isMining = 1; // True if the client is mining, otherwise False
}

/*
    This is the return of the RPC call: EthHashRate.
    This RPC will always return "0x"
    "result": "0x"
*/
message EthHashRateResponse {
    string hash_rate = 1; // [Hex string] Number of hashes per second
}

/*
    This is the return of the RPC call: EthGasPrice.
    Here is an example of the return of this proto message:
    "result": "0x1dfd14000" // 8049999872 Wei
*/
message EthGasPriceResponse {
    string gas_price = 1; // [Hex string] Integer of the current gas price in wei
}

/*
    This is the return of the RPC call: EthBlockNumber.
    Here is an example of the return of this proto message:
    "result": "0x4b7" // 1207
*/
message EthBlockNumberResponse {
    string block_number = 1; // [Hex string] Integer of the current block number the client is on
}

/*
    This is the request of the RPC call: EthGetTransactionCount.
    Here is an example of the parameters of this proto message:
    params: ["0x407d73d8a49eeb85d32cf465507dd71d507100c1", "latest", // state at the latest block]
    params: ["0x407d73d8a49eeb85d32cf465507dd71d507100c1", "0x20"]
*/
message EthGetTransactionCountRequest {
    string address = 1;
    string block_number = 2; // [Hex string] Integer block number, or the string "latest", "earliest" or "pending"
}

/*
    This is the return of the RPC call: EthGetTransactionCount.
    Here is an example of the return of this proto message:
    "result": "0x1" // 1
*/
message EthGetTransactionCountResponse {
    string number_transaction = 1; // [Hex string] Integer of the number of transactions send from this address
}

/*
    This is the request of the RPC call: EthGetBlockTransactionCountByHash.
    Here is an example of the parameters of this proto message:
    params: ["0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"]
*/
message EthGetBlockTransactionCountByHashRequest {
    string block_hash = 1; // [Hex string] Hash of a block
}

/*
    This is the return of the RPC call: EthGetBlockTransactionCountByHash.
    Here is an example of the return of this proto message:
    "result": "0xb" // 11
*/
message EthGetBlockTransactionCountByHashResponse {
    string number_transaction = 1; // Integer of the number of transactions in this block (Hex)
}

/*
    This is the request of the RPC call: EthGetBlockTransactionCountByNumber.
    Here is an example of the parameters of this proto message:
    "params":["0xe8"]
    "params":["earliest"]
*/
message EthGetBlockTransactionCountByNumberRequest {
    string block_number = 1; // [Hex string] Integer block number, or the string "latest", "earliest" or "pending"
}

/*
    This is the return of the RPC call: EthGetBlockTransactionCountByNumber.
    Here is an example of the return of this proto message:
    "result": "0xb" // 11
*/
message EthGetBlockTransactionCountByNumberResponse {
    string number_transaction = 1; // [Hex string] Integer of the number of transactions in this block
}

/*
    This is the request of the RPC call: EthGetUncleCountByBlockHash.
    Here is an example of the parameters of this proto message:
    params: ["0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"]
*/
message EthGetUncleCountByBlockHashRequest {
    string block_hash = 1; // [Hex string] Hash of a block
}

/*
    This is the return of the RPC call: EthGetUncleCountByBlockHash.
    Here is an example of the return of this proto message:
    "result": "0x1" // 1
*/
message EthGetUncleCountByBlockHashResponse {
    string number_uncles = 1; // [Hex string] Integer of the number of uncles in this block
}

/*
    This is the request of the RPC call: EthGetUncleCountByBlockNumber.
    Here is an example of the parameters of this proto message:
    "params":["0xe8"]
    "params":["pending"]
*/
message EthGetUncleCountByBlockNumberRequest {
    string block_number = 1; // [Hex string] Integer block number, or the string "latest", "earliest" or "pending"
}

/*
    This is the return of the RPC call: EthGetUncleCountByBlockNumber.
    Here is an example of the return of this proto message:
    "result": "0x1" // 1
*/
message EthGetUncleCountByBlockNumberResponse {
    string number_uncles = 1; // [Hex string] Integer of the number of uncles in this block
}

/*
    This is the request of the RPC call: EthGetCode.
    Here is an example of the parameters of this proto message:
    params: [
      "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
      "0x2", // 2
    ]
    params: [
      "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
      "pending",
    ]
*/
message EthGetCodeRequest {
    string address = 1; // [Hex string] Address you wan to get the code from
    string block_number = 2; // [Hex string] Integer block number, or the string "latest", "earliest" or "pending"
}

/*
    This is the return of the RPC call: EthGetCode.
    Here is an example of the return of this proto message:
    "result": "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
*/
message EthGetCodeResponse {
    string code = 1; // [Hex string] The code from the given address
}

/*
    This is the request of the RPC call: EthSignTransaction.
    Here is an example of the parameters of this proto message:
    "params": [{
      "data":"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675",
      "from": "0xb60e8dd61c5d32be8058bb8eb970870f07233155",
      "gas": "0x76c0",
      "gasPrice": "0x9184e72a000",
      "to": "0xd46e8dd67c5d32be8058bb8eb970870f07244567",
      "value": "0x9184e72a"
    }]
*/
message EthSignTransactionRequest {
    EthTransactionInfo transaction_info = 1; // The transaction object to be signed
}

/*
    This is the return of the RPC call: EthSignTransaction.
    Here is an example of the return of this proto message:
    "result": "0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b"
*/
message EthSignTransactionResponse {
    string transaction = 1; // [Hex string] The signed transaction object
}

/*
    This is the request of the RPC call: EthSendRawTransaction.
    Here is an example of the parameters of this proto message:
    params: ["0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675",]
*/
message EthSendRawTransactionRequest {
    string transaction = 1; // [Hex string] signed transaction
}

/*
    This is the return of the RPC call: EthSendRawTransaction.
    Here is an example of the return of this proto message:
    "result": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"
    "result": "0x"
*/
message EthSendRawTransactionResponse {
    string hash = 1; // [Hex string] The transaction hash, or the zero hash if the transaction is not yet available.
}

message EthEstimateGasRequest {
    EthTransactionInfo transaction_info = 1; // Transaction info
    optional string block_number = 2; // [Hex string] Block number or the string latest, earliest, pending, safe or finalized
}

/*
    This is the return of the RPC call: EthEstimateGas.
    Here is an example of the return of this proto message:
    "result": "0x5208" // 21000
*/
message EthEstimateGasResponse {
    string gas_used = 1; // [Hex string] The amount of gas used
}

/*
    This is the request of the RPC call: EthGetBlockByHash.
    Here is an example of the parameters of this proto message:
    params: ["0xdc0818cf78f21a8e70579cb46a43643f78291264dda342ae31049421c82d21ae", false,]
*/
message EthGetBlockByHashRequest {
    string hash = 1; // [Hex string] Hash of a block
    bool full_transaction = 2; // If true it returns the full transaction objects, if false only the hashes of the transactions
}

/*
    This is the return of the RPC call: EthGetBlockByHash.
    Here is an example of the return of this proto message:
    "result": {
      "difficulty": "0x4ea3f27bc",
      "extraData": "0x476574682f4c5649562f76312e302e302f6c696e75782f676f312e342e32",
      "gasLimit": "0x1388",
      "gasUsed": "0x0",
      "hash": "0xdc0818cf78f21a8e70579cb46a43643f78291264dda342ae31049421c82d21ae",
      "logsBloom": "0x
      "miner": "0xbb7b8287f3f0a933474a79eae42cbca977791171",
      "mixHash": "0x4fffe9ae21f1c9e15207b1f472d5bbdd68c9595d461666602f2be20daf5e7843",
      "nonce": "0x689056015818adbe",
      "number": "0x1b4",
      "parentHash": "0xe99e022112df268087ea7eafaf4790497fd21dbeeb6bd7a1721df161a6657a54",
      "receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
      "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
      "size": "0x220",
      "stateRoot": "0xddc8b0234c2e0cad087c8b389aa7ef01f7d79b2570bccb77ce48648aa61c904d",
      "timestamp": "0x55ba467c",
      "totalDifficulty": "0x78ed983323d",
      "transactions": [],
      "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
      "uncles": []
    }
*/
message EthGetBlockByHashResponse {
    EthBlockInfo block_info = 1; // A block object, or null when no block was found
}

/*
    This is the request of the RPC call: EthGetBlockByNumber.
    Here is an example of the parameters of this proto message:
    params: [
      "0x1b4", // 436
      true,
    ]
*/
message EthGetBlockByNumberRequest {
    string number = 1; // [Hex string] Block number
    bool full_transaction = 2; // If true it returns the full transaction objects, if false only the hashes of the transactions
}

/*
    This is the return of the RPC call: EthGetBlockByNumber.
    Here is an example of the return of this proto message:
    "result": {
      "difficulty": "0x4ea3f27bc",
      "extraData": "0x476574682f4c5649562f76312e302e302f6c696e75782f676f312e342e32",
      "gasLimit": "0x1388",
      "gasUsed": "0x0",
      "hash": "0xdc0818cf78f21a8e70579cb46a43643f78291264dda342ae31049421c82d21ae",
      "logsBloom": "0x
      "miner": "0xbb7b8287f3f0a933474a79eae42cbca977791171",
      "mixHash": "0x4fffe9ae21f1c9e15207b1f472d5bbdd68c9595d461666602f2be20daf5e7843",
      "nonce": "0x689056015818adbe",
      "number": "0x1b4",
      "parentHash": "0xe99e022112df268087ea7eafaf4790497fd21dbeeb6bd7a1721df161a6657a54",
      "receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
      "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
      "size": "0x220",
      "stateRoot": "0xddc8b0234c2e0cad087c8b389aa7ef01f7d79b2570bccb77ce48648aa61c904d",
      "timestamp": "0x55ba467c",
      "totalDifficulty": "0x78ed983323d",
      "transactions": [],
      "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
      "uncles": []
    }
*/
message EthGetBlockByNumberResponse {
    EthBlockInfo block_info = 1; // A block object, or null when no block was found
}

/*
    This is the request of the RPC call: EthGetTransactionByHash.
    Here is an example of the parameters of this proto message:
    params: ["0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b"]
*/
message EthGetTransactionByHashRequest {
    string hash = 1; // [Hex string] Hash of the transaction
}

/*
    This is the return of the RPC call: EthGetTransactionByHash.
    Here is an example of the return of this proto message:
    "result":{
      "blockHash":"0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2",
      "blockNumber":"0x5daf3b", // 6139707
      "from":"0xa7d9ddbe1f17865597fbd27ec712455208b6b76d",
      "gas":"0xc350", // 50000
      "gasPrice":"0x4a817c800", // 20000000000
      "hash":"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b",
      "input":"0x68656c6c6f21",
      "nonce":"0x15", // 21
      "to":"0xf02c1c8e6114b1dbe8937a39260b5b0a374432bb",
      "transactionIndex":"0x41", // 65
      "value":"0xf3dbb76162000", // 4290000000000000
      "v":"0x25", // 37
      "r":"0x1b5e176d927f8e9ab405058b2d2457392da3e20f328b16ddabcebc33eaac5fea",
      "s":"0x4ba69724e8f69de52f0125ad8b3c5c2cef33019bac3249e2c0a2192766d1721c"
    }
*/
message EthGetTransactionByHashResponse {
    EthTransactionInfo transaction = 1; // A transaction object, or null when no transaction was found
}

/*
    This is the request of the RPC call: EthGetTransactionByBlockHashAndIndex.
    Here is an example of the parameters of this proto message:
    params: [
      "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",
      "0x0", // 0
    ]
*/
message EthGetTransactionByBlockHashAndIndexRequest {
    string block_hash = 1; // [Hex string] Hash of a block
    string index = 2; // [Hex string] Integer of the transaction index position
}

/*
    This is the return of the RPC call: EthGetTransactionByBlockHashAndIndex.
    Here is an example of the return of this proto message:
    "result":{
      "blockHash":"0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2",
      "blockNumber":"0x5daf3b", // 6139707
      "from":"0xa7d9ddbe1f17865597fbd27ec712455208b6b76d",
      "gas":"0xc350", // 50000
      "gasPrice":"0x4a817c800", // 20000000000
      "hash":"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b",
      "input":"0x68656c6c6f21",
      "nonce":"0x15", // 21
      "to":"0xf02c1c8e6114b1dbe8937a39260b5b0a374432bb",
      "transactionIndex":"0x41", // 65
      "value":"0xf3dbb76162000", // 4290000000000000
      "v":"0x25", // 37
      "r":"0x1b5e176d927f8e9ab405058b2d2457392da3e20f328b16ddabcebc33eaac5fea",
      "s":"0x4ba69724e8f69de52f0125ad8b3c5c2cef33019bac3249e2c0a2192766d1721c"
    }
*/
message EthGetTransactionByBlockHashAndIndexResponse {
    EthTransactionInfo transaction = 1; // A transaction object, or null when no transaction was found
}

/*
    This is the request of the RPC call: EthGetTransactionByBlockNumberAndIndex.
    Here is an example of the parameters of this proto message:
    params: [
      "0x29c", // 668
      "0x0", // 0
    ]
    params: ["lastest", "0x0",]
*/
message EthGetTransactionByBlockNumberAndIndexRequest {
    string block_number = 1; // [Hex string] Integer block number, or the string "latest", "earliest" or "pending"
    string index = 2; // [Hex string] Integer of the transaction index position
}

/*
    This is the return of the RPC call: EthGetTransactionByBlockNumberAndIndex.
    Here is an example of the return of this proto message:
    "result":{
      "blockHash":"0x1d59ff54b1eb26b013ce3cb5fc9dab3705b415a67127a003c3e61eb445bb8df2",
      "blockNumber":"0x5daf3b", // 6139707
      "from":"0xa7d9ddbe1f17865597fbd27ec712455208b6b76d",
      "gas":"0xc350", // 50000
      "gasPrice":"0x4a817c800", // 20000000000
      "hash":"0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b",
      "input":"0x68656c6c6f21",
      "nonce":"0x15", // 21
      "to":"0xf02c1c8e6114b1dbe8937a39260b5b0a374432bb",
      "transactionIndex":"0x41", // 65
      "value":"0xf3dbb76162000", // 4290000000000000
      "v":"0x25", // 37
      "r":"0x1b5e176d927f8e9ab405058b2d2457392da3e20f328b16ddabcebc33eaac5fea",
      "s":"0x4ba69724e8f69de52f0125ad8b3c5c2cef33019bac3249e2c0a2192766d1721c"
    }
*/
message EthGetTransactionByBlockNumberAndIndexResponse {
    EthTransactionInfo transaction = 1; // A transaction object, or null when no transaction was found
}

/*
    This is the request of the RPC call: EthGetUncleByBlockHashAndIndex.
    Here is an example of the parameters of this proto message:
    params: [
      "0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b",
      "0x0", // 0
    ]
*/
message EthGetUncleByBlockHashAndIndexRequest {
    string block_hash = 1; // [Hex string] Hash of a block
    string index = 2; // [Hex string] Integer of the transaction index position
}

/*
    This is the return of the RPC call: EthGetUncleByBlockHashAndIndex.
    Here is an example of the return of this proto message:
    "result": {
      "difficulty": "0x4ea3f27bc",
      "extraData": "0x476574682f4c5649562f76312e302e302f6c696e75782f676f312e342e32",
      "gasLimit": "0x1388",
      "gasUsed": "0x0",
      "hash": "0xdc0818cf78f21a8e70579cb46a43643f78291264dda342ae31049421c82d21ae",
      "logsBloom": "0x
      "miner": "0xbb7b8287f3f0a933474a79eae42cbca977791171",
      "mixHash": "0x4fffe9ae21f1c9e15207b1f472d5bbdd68c9595d461666602f2be20daf5e7843",
      "nonce": "0x689056015818adbe",
      "number": "0x1b4",
      "parentHash": "0xe99e022112df268087ea7eafaf4790497fd21dbeeb6bd7a1721df161a6657a54",
      "receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
      "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
      "size": "0x220",
      "stateRoot": "0xddc8b0234c2e0cad087c8b389aa7ef01f7d79b2570bccb77ce48648aa61c904d",
      "timestamp": "0x55ba467c",
      "totalDifficulty": "0x78ed983323d",
      "transactions": [],
      "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
      "uncles": []
    }
*/
message EthGetUncleByBlockHashAndIndexResponse {
    EthBlockInfo block_info = 1; // A block object, or null when no block was found
}

/*
    This is the request of the RPC call: EthGetUncleByBlockNumberAndIndex.
    Here is an example of the parameters of this proto message:
    params: [
      "0x29c", // 668
      "0x0", // 0
    ]
    params: ["earliest", "0x0",]
*/
message EthGetUncleByBlockNumberAndIndexRequest {
    string block_number = 1; // [Hex string] Integer block number, or the string "latest", "earliest" or "pending"
    string index = 2; // [Hex string] Integer of the transaction index position
}

/*
    This is the return of the RPC call: EthGetUncleByBlockNumberAndIndex.
    Here is an example of the return of this proto message:
    "result": {
      "difficulty": "0x4ea3f27bc",
      "extraData": "0x476574682f4c5649562f76312e302e302f6c696e75782f676f312e342e32",
      "gasLimit": "0x1388",
      "gasUsed": "0x0",
      "hash": "0xdc0818cf78f21a8e70579cb46a43643f78291264dda342ae31049421c82d21ae",
      "logsBloom": "0x
      "miner": "0xbb7b8287f3f0a933474a79eae42cbca977791171",
      "mixHash": "0x4fffe9ae21f1c9e15207b1f472d5bbdd68c9595d461666602f2be20daf5e7843",
      "nonce": "0x689056015818adbe",
      "number": "0x1b4",
      "parentHash": "0xe99e022112df268087ea7eafaf4790497fd21dbeeb6bd7a1721df161a6657a54",
      "receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
      "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
      "size": "0x220",
      "stateRoot": "0xddc8b0234c2e0cad087c8b389aa7ef01f7d79b2570bccb77ce48648aa61c904d",
      "timestamp": "0x55ba467c",
      "totalDifficulty": "0x78ed983323d",
      "transactions": [],
      "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
      "uncles": []
    }
*/
message EthGetUncleByBlockNumberAndIndexResponse {
    EthBlockInfo block_info = 1; // A block object, or null when no block was found
}

message EthGetCompilersResponse {
    repeated string compilers = 1; // Array of available compilers
}

message EthCompileSolidityRequest {
    string code = 1; // The source code
}

message EthCompileSolidityResponse {
    string compiled_code = 1; // The compiled source code
}

message EthCompileLLLRequest {
    string code = 1; // The source code
}

message EthCompileLLLResponse {
    string compiled_code = 1; // The compiled source code
}

message EthCompileSerpentRequest {
    string code = 1; // The source code
}

message EthCompileSerpentResponse {
    string compiled_code = 1; // The compiled source code
}

/*
    This is the return of the RPC call: EthProtocolVersion.
    Here is an example of the return of this proto message:
    "result": "54"
*/
message EthProtocolVersionResponse {
    string protocol_version = 1; // The current DMC protocol version
}

/*
    This is the request of the RPC call: Web3Sha3.
    Here is an example of the parameters of this proto message:
    params: ["0x68656c6c6f20776f726c64"]
*/
message Web3Sha3Request {
    string data = 1; // [Hex string] The data to convert into a SHA3 hash
}

/*
    This is the return of the RPC call: Web3Sha3.
    Here is an example of the return of this proto message:
    "result": "0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad"
*/
message Web3Sha3Response {
    string data = 1; // [Hex string] The SHA3 result of the given string.
}

/*
    This is the return of the RPC call: NetPeerCount.
    Here is an example of the return of this proto message:
    "result": "0x2" // 2
*/
message NetPeerCountResponse {
    string number_peer = 1; // [Hex string] Integer of the number of connected peers
}

/*
    This is the return of the RPC call: NetVersion.
    Here is an example of the return of this proto message:
    "result": "3"
*/
message NetVersionResponse {
    string network_version = 1; // The current network id
}

/*
    This is the return of the RPC call: Web3ClientVersion.
    Here is an example of the return of this proto message:
    "result": "Mist/v0.9.3/darwin/go1.4.1"
*/
message Web3ClientVersionResponse {
    string client_version = 1; // The current client version
}

// Return always "0x0" for all the fields
message EthGetWorkResponse {
    string currentblock = 1; // Current block header pow-hash
    string seed_hash = 2; // The seed hash used for the DAG.
    string target = 3; // The boundary condition ("target"), 2^256 / difficulty.
}

// This request will never succeed
message EthSubmitWorkRequest {
    string nounce = 1; // The nonce found (64 bits)
    string pow_hash = 2; // The header's pow-hash (256 bits)
    string mix_digest = 3; // The mix digest (256 bits)
}

// Will always return False
message EthSubmitWorkResponse {
    bool is_valid = 1; // Returns true if the provided solution is valid, otherwise false
}

// This request will never succeed
message EthSubmitHashrateRequest {
    string hash_rate = 1; // Hexadecimal string representation (32 bytes) of the hashrate
    string id = 2; // A random hexadecimal(32 bytes) ID identifying the client
}

// Will always return False
message EthSubmitHashrateResponse {
    bool is_valid = 1; // Returns true if submitting went through successfully and false otherwise
}

/*
    This is the request of the RPC call: EthGetStorageAt.
    Here is an example of the parameters of this proto message:
    "params": ["0x295a70b2de5e3953354a6a8344e616ed314d7251", "0x0", "0xfa"]
    "params": ["0x295a70b2de5e3953354a6a8344e616ed314d7251", "0x0", "latest"]
*/
message EthGetStorageAtRequest {
    string address = 1; // [Hex string] Address of the storage
    string position = 2; // [Hex string] integer of the position in the storage
    string block_number = 3; // [Hex string] Integer block number, or the string "latest", "earliest" or "pending"
}

/*
    This is the return of the RPC call: EthGetStorageAt.
    Here is an example of the return of this proto message:
    "result":"0x00000000000000000000000000000000000000000000000000000000000004d2"
*/
message EthGetStorageAtResponse {
    string value = 1; // [Hex string] The value at this storage position.
}

/*
    This is the request of the RPC call: EthGetTransactionReceipt.
    Here is an example of the parameters of this proto message:
    params: ["0x85d995eba9763907fdf35cd2034144dd9d53ce32cbec21349d4b12823c6860c5"]
*/
message EthGetTransactionReceiptRequest {
    string transaction_hash = 1; // [Hex string] Hash of a transaction
}

/*
    This is the return of the RPC call: EthGetTransactionReceipt.
    Here is an example of the return of this proto message:
    "result": {
      "blockHash":"0xa957d47df264a31badc3ae823e10ac1d444b098d9b73d204c40426e57f47e8c3",
      "blockNumber": "0xeff35f",
      "contractAddress": null, // string of the address if it was created
      "cumulativeGasUsed": "0xa12515",
      "effectiveGasPrice": "0x5a9c688d4",
      "from": "0x6221a9c005f6e47eb398fd867784cacfdcfff4e7",
      "gasUsed": "0xb4c8",
      "logs": [{
        // logs as returned by getFilterLogs, etc.
      }],
      "logsBloom": "0x00...0", // 256 byte bloom filter
      "status": "0x1",
      "to": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
      "transactionHash":
        "0x85d995eba9763907fdf35cd2034144dd9d53ce32cbec21349d4b12823c6860c5",
      "transactionIndex": "0x66",
      "type": "0x2"
    }
*/
message EthGetTransactionReceiptResponse {
    EthTransactionReceipt transaction_receipt = 1; // A transaction receipt object, or null when no receipt was found
}

message EthSyncingInfo {
    string starting_block = 1; // The block at which the import started (will only be reset, after the sync reached his head)
    string current_block = 2; // The current block, same as eth_blockNumber
    string highest_block = 3; // The estimated highest block
}

/*
    This is the return of the RPC call: EthSyncing.
    This request will return an object with the sync status data or false when not syncing.
    Here is an example of the return of this proto message:
    "result": {
      startingBlock: '0x384',
      currentBlock: '0x386',
      highestBlock: '0x454'
    }
    "result": false
*/
message EthSyncingResponse {
    oneof value { 
        bool status = 1; // Return False when not syncing
        EthSyncingInfo sync_info = 2; // An object with sync status data
    }
}
