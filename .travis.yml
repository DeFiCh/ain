# The test build matrix (stage: test) is constructed to test a wide range of
# configurations, rather than a single pass/fail. This helps to catch build
# failures and logic errors that present on platforms other than the ones the
# author has tested.
#
# Some builders use the dependency-generator in `./depends`, rather than using
# apt-get to install build dependencies. This guarantees that the tester is
# using the same versions as Gitian, so the build results are nearly identical
# to what would be found in a final release.
#
# In order to avoid rebuilding all dependencies for each build, the binaries
# are cached and re-used when possible. Changes in the dependency-generator
# will trigger cache-invalidation and rebuilds as necessary.
#
# These caches can be manually removed if necessary. This is one of the very
# few manual operations that is possible with Travis, and it can be done by a
# DeFi Foundation GitHub member via the Travis web interface [0].
#
# Travis CI uploads the cache after the script phase of the build [1].
# However, the build is terminated without saving the cache if it takes over
# 50 minutes [2]. Thus, if we spent too much time in early build stages, fail
# with an error and save the cache.
#
# [0] https://travis-ci.org/defich/ain/caches
# [1] https://docs.travis-ci.com/user/caching/#build-phases
# [2] https://docs.travis-ci.com/user/customizing-the-build#build-timeouts

dist: xenial
os: linux
language: minimal
cache:
  ccache: true
  directories:
    - $TRAVIS_BUILD_DIR/depends/built
    - $TRAVIS_BUILD_DIR/depends/sdk-sources
    - $TRAVIS_BUILD_DIR/ci/scratch/.ccache
stages:
  - lint
  - test
  - extended-lint
env:
  global:
    - CI_RETRY_EXE="travis_retry"
    - CACHE_ERR_MSG="Error! Initial build successful, but not enough time remains to run later build stages and tests. Please manually re-run this job by using the travis restart button or asking a DeFi Blockchain maintainer to restart. The next run should not time out because the build cache has been saved."
before_install:
  - set -o errexit; source ./ci/test/00_setup_env.sh
  - set -o errexit; source ./ci/test/03_before_install.sh
install:
  - set -o errexit; source ./ci/test/04_install.sh
before_script:
  - set -o errexit; source ./ci/test/05_before_script.sh
script:
  - export CONTINUE=1
  - if [ $SECONDS -gt 1200 ]; then export CONTINUE=0; fi  # Likely the depends build took very long
  - if [ $TRAVIS_REPO_SLUG = "defich/ain" ] || [ $TRAVIS_REPO_SLUG = "cakedefi/defichain" ]; then export CONTINUE=1; fi  # Whitelisted repo (90 minutes build time)
  - if [ $CONTINUE = "1" ]; then set -o errexit; source ./ci/test/06_script_a.sh; else set +o errexit; echo "$CACHE_ERR_MSG"; false; fi
  - if [ $SECONDS -gt 2000 ]; then export CONTINUE=0; fi  # Likely the build took very long; The tests take about 1000s, so we should abort if we have less than 50*60-1000=2000s left
  - if [ $TRAVIS_REPO_SLUG = "defich/ain" ] || [ $TRAVIS_REPO_SLUG = "cakedefi/defichain" ]; then export CONTINUE=1; fi  # Whitelisted repo (90 minutes build time)
  - if [ $CONTINUE = "1" ]; then set -o errexit; source ./ci/test/06_script_b.sh; else set +o errexit; echo "$CACHE_ERR_MSG"; false; fi
after_script:
  - echo $TRAVIS_COMMIT_RANGE
jobs:
  include:

    - stage: lint
      name: 'lint'
      cache: false
      language: python
      python: '3.5' # Oldest supported version according to doc/dependencies.md
      install:
        - set -o errexit; source ./ci/lint/04_install.sh
      before_script:
        - set -o errexit; source ./ci/lint/05_before_script.sh
      script:
        - set -o errexit; source ./ci/lint/06_script.sh

    - stage: extended-lint
      name: 'extended lint [runtime >= 60 seconds]'
      cache: false
      language: python
      python: '3.5'
      install:
        - set -o errexit; source ./ci/extended_lint/04_install.sh
      before_script:
        - set -o errexit; source ./ci/lint/05_before_script.sh
      script:
        - set -o errexit; source ./ci/extended_lint/06_script.sh

    # - stage: test
    #   name: 'ARM  [GOAL: install]  [no unit or functional tests]'
    #   env: >-
    #     FILE_ENV="./ci/test/00_setup_env_arm.sh"

    # - stage: test
    #   name: 'Win64  [GOAL: deploy]  [no gui or functional tests]'
    #   env: >-
    #     FILE_ENV="./ci/test/00_setup_env_win64.sh"

    # - stage: test
    #   name: '32-bit + dash  [GOAL: install]  [GUI: no BIP70]'
    #   env: >-
    #     FILE_ENV="./ci/test/00_setup_env_i686.sh"

    # - stage: test
    #   name: 'x86_64 Linux  [GOAL: install]  [bionic]  [uses qt5 dev package instead of depends Qt to speed up build and avoid timeout] [unsigned char]'
    #   env: >-
    #     FILE_ENV="./ci/test/00_setup_env_amd64_qt5.sh"

    # - stage: test
    #   name: 'x86_64 Linux  [GOAL: install]  [trusty]  [no functional tests, no depends, only system libs]'
    #   env: >-
    #     FILE_ENV="./ci/test/00_setup_env_amd64_trusty.sh"

    # - stage: test
    #   name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no depends, only system libs, sanitizers: thread (TSan), no wallet]'
    #   env: >-
    #     FILE_ENV="./ci/test/00_setup_env_amd64_tsan.sh"

    - stage: test
      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: address/leak (ASan + LSan) + undefined (UBSan) + integer]'
      env: >-
        FILE_ENV="./ci/test/00_setup_env_amd64_asan.sh"

    # - stage: test
    #   name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: fuzzer,address]'
    #   env: >-
    #     FILE_ENV="./ci/test/00_setup_env_amd64_fuzz.sh"

    # - stage: test
    #   name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no wallet]'
    #   env: >-
    #     FILE_ENV="./ci/test/00_setup_env_amd64_nowallet.sh"

    # - stage: test
    #   name: 'macOS 10.10  [GOAL: deploy] [no functional tests]'
    #   env: >-
    #     FILE_ENV="./ci/test/00_setup_env_mac.sh"
