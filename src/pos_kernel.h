#pragma once

#include <uint256.h>
#include <arith_uint256.h>
#include <consensus/params.h>
#include <streams.h>
#include <amount.h>

class CWallet;

class COutPoint;

class CBlock;

class CTransaction;

class CCoinsViewCache;

namespace pos {

    struct CheckKernelHashRes {
        bool hashOk;
        arith_uint256 hashProofOfStake;
    };

/// Calculate PoS kernel hash
    uint256
    CalcKernelHash(uint256 stakeModifier, int64_t coinstakeTime, const COutPoint& prevout, const Consensus::Params& params);

/// Check whether stake kernel meets hash target
/// Sets hashProofOfStake, hashOk is true of the kernel meets hash target
    CheckKernelHashRes
    CheckKernelHash(uint256 stakeModifier, uint32_t nBits, int64_t coinstakeTime, CAmount coinstakeAmount,
                    const COutPoint& prevout, const Consensus::Params& params);

/// Stake Modifier (hash modifier of proof-of-stake):
/// The purpose of stake modifier is to prevent a txout (coin) owner from
/// computing future proof-of-stake generated by this txout at the time
/// of transaction confirmation. To meet kernel protocol, the txout
/// must hash with a future stake modifier to generate the proof.
    uint256 ComputeStakeModifier_PoS(uint256 prevStakeModifier, const COutPoint& prevout);
}
