name: Build - Dev

on:
  workflow_dispatch:
  push:
    tags:
      - "!v*"
    branches:
      - master
      - testnet
      - epic/*
      - t/*
      - e/*
      - v*
      - "[0-9]+.[0-9]+.x"
  pull_request:
    branches:
      - master
      - testnet
      - epic/*
      - t/*
      - e/*
      - v*
      - "[0-9]+.[0-9]+.x"

env:
  MAKE_CONF_ARGS: --disable-bench

jobs:

  linux:
  # We use a matrix since it's easier to migrate upwards, add new
  # test on multiple, then remove old without creating friction.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
    env:
      BUILD_VERSION: latest # Computed

    steps:
    - uses: actions/checkout@v3

    - name: Build and package
      run: DOCKERFILE="x86_64-pc-linux-gnu-clang" TARGET="x86_64-pc-linux-gnu" ./make.sh docker-release-git

    - name: Publish artifact - x86_64-pc-linux-gnu
      uses: actions/upload-artifact@v3
      with:
        name: defichain-${{ env.BUILD_VERSION }}-x86_64-pc-linux-gnu
        path: ./build/defichain-${{ env.BUILD_VERSION }}-x86_64-pc-linux-gnu.tar.gz

    # Linux build additionally pushes the docker images to docker hub on successful build
    - name: Tag dockerhub build
      if: ${{ github.repository == 'DeFiCh/ain' }}
      run: >
        docker tag defichain-x86_64-pc-linux-gnu:${{ env.BUILD_VERSION }}
        defichain-x86_64-pc-linux-gnu:dockerhub-latest

    - uses: docker/build-push-action@v1
    # Make sure to only build on ain repo. Also add in additional restrictions here if needed to
    # make sure we don't push unnecessary images to docker
      if: ${{ github.repository == 'DeFiCh/ain' }}
      with:
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        path: ./contrib/dockerfiles/dockerhub
        dockerfile: ./contrib/dockerfiles/dockerhub/x86_64-pc-linux-gnu.dockerfile
        repository: defi/defichain
        tags: ${{ env.BUILD_VERSION }}

  windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
    env:
      BUILD_VERSION: latest # Computed

    steps:
    - uses: actions/checkout@v3

    - name: Build and package
      run: TARGET="x86_64-w64-mingw32" ./make.sh docker-release-git

    - name: Publish artifact - x86_64-w64-mingw32
      uses: actions/upload-artifact@v3
      with:
        name: defichain-${{ env.BUILD_VERSION }}-x86_64-w64-mingw32
        path: ./build/defichain-${{ env.BUILD_VERSION }}-x86_64-w64-mingw32.tar.gz

  macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
    env:
      BUILD_VERSION: latest # Computed

    steps:
    - uses: actions/checkout@v3

    - name: Build and package
      run: TARGET="x86_64-apple-darwin18" ./make.sh docker-release-git

    - name: Publish artifact - x86_64-apple-darwin18
      uses: actions/upload-artifact@v3
      with:
        name: defichain-${{ env.BUILD_VERSION }}-x86_64-apple-darwin18
        path: ./build/defichain-${{ env.BUILD_VERSION }}-x86_64-apple-darwin18.tar.gz
