name: Build - Staging

on:
  workflow_dispatch:

env:
  MAKE_DEBUG: 0
  GIT_VERSION: 1

jobs:
  # We keep the flow as similar as close to release flow as possible
  # to validate change before it gets into release, even though
  # these don't create end artifacts to use
  stage-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-pc-linux-gnu, aarch64-linux-gnu, x86_64-w64-mingw32, x86_64-apple-darwin, aarch64-apple-darwin]
        include:
        - container: defi/ain-builder:latest
        - target: x86_64-w64-mingw32
          container: defi/ain-win-builder:latest
    container:
      image: ${{ matrix.container }}
    env:
      TARGET: ${{matrix.target}}

    steps:
    - uses: actions/checkout@v4
    - run: git config --global --add safe.directory '*'

    - name: Populate environment
      run: ./make.sh ci-export-vars

    - name: Setup dependencies
      run: ./make.sh ci-setup-deps

    - name: Setup user dependencies
      run: ./make.sh ci-setup-user-deps

    - name: Build and package
      run: ./make.sh release

    - name: Publish artifact
      uses: actions/upload-artifact@v3
      with:
        name: defichain-${{ env.BUILD_VERSION }}-${{ env.TARGET }}
        path: |
          ./build/defichain-${{ env.BUILD_VERSION }}-${{ env.TARGET }}.${{ env.PKG_TYPE }}
          ./build/defichain-${{ env.BUILD_VERSION }}-${{ env.TARGET }}.${{ env.PKG_TYPE }}.SHA256

  stage-docker-release:
    runs-on: ubuntu-latest
    needs: [stage-release]
    env:
      TARGET: x86_64-pc-linux-gnu

    steps:
    - uses: actions/checkout@v4

    - name: Populate environment
      run: ./make.sh ci-export-vars

    - name: Download binaries
      uses: actions/download-artifact@v3
      with:
        name: defichain-${{ env.BUILD_VERSION }}-${{ env.TARGET }}
        path: ./build/
    
    - name: Unpack binaries
      run: tar -xvzf ./build/defichain-${{ env.BUILD_VERSION }}-${{ env.TARGET }}.${{ env.PKG_TYPE }} -C ./build/

    - name: Build defi image
      run: rm .dockerignore && ./make.sh docker-build-from-binaries
